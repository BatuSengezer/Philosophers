1) check leaks in case of error exit
4) - You must verify the absence of data races.
You are allowed to use any of the different tools available on the computer,
such as valgrind with "--tool=helgrind" and "--tool=drd". In case of any
data-race, the evaluation stops here.
5)Check how the death of a philosopher is verified and if there is a mutex to 
prevent a philosopher from dying and starting eating at the same time.
6)Check following with different numbers 
number_of_times_each_philosopher_must_eat (optional argument: If all
9)check these at school computer
	Test 4 410 200 200. No philosopher should die.
	Test 4 310 200 100. One philosopher should die.
visualizer:
https://nafuka11.github.io/philosophers-visualizer/


10) case: ./philo 2 200 100 150
0 1 has taken a fork
0 1 has taken a fork
0 1 is eating
103 1 is sleeping
103 2 has taken a fork
103 2 has taken a fork
103 2 is eating
208 2 is sleeping
256 1 is thinking
256 1 died
(it should die at 210 at max)

Test with 2 philosophers and check the different times: 
a death delayed by more than 10 ms is unacceptable.

11) case ./philo 5 500 200 200 2 (it doesn't in even philosopher numbers)

check visualizer with the output
https://nafuka11.github.io/philosophers-visualizer/

eating takes more then 200 ms



New
12)Make philos even and odd leave forks in order

13)leave forks in case of death

14) dies before
 ./philo 5 800 200 200 3